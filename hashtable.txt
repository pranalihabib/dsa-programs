/*Consider telephone book database of N clients. Make use of a hash table
implementation to quickly look up clientâ€˜s telephone number. Make use of two collision
handling techniques and compare them using number of comparisons required to find a
set of telephone numbers*/

#include<iostream>
#include<string>
using namespace std;

class Node {
public:
    int data;
    string name;
    Node* next;

    Node(int key, string name) {
        this->data = key;
        this->name = name;
        this->next = NULL;
    }
};

class hashing {
    Node* hashtable1[10]; //initialized 10 lists to null which are obv not connected to each other and all of them have separate heads
    int hashtable2[10];
    string nametable[10];
    bool occ[10];

public:
    hashing() {
        for (int i = 0; i < 10; i++) {     //separate chaining table created
            hashtable1[i] = NULL;
        }
        for (int i = 0; i < 10; i++) {      //linear probing table created
            hashtable2[i] = -1;
            nametable[i] = "";
            occ[i] = false;
        }
    }

    void insert1(int key, string name) {
        int loc = key % 10;
        if (hashtable1[loc] == NULL) {
            hashtable1[loc] = new Node(key, name);
        } else {
            Node* temp = hashtable1[loc];
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = new Node(key, name);
        }
    }

    void insert2(int key, string name) {
        int loc = key % 10;
        bool inserted = false;

        for (int i = 0; i < 10; i++) {
            if (!occ[loc]) {
                hashtable2[loc] = key;
                nametable[loc] = name;
                occ[loc] = true;
                inserted = true;
                break;
            }
            loc = (loc + 1) % 10;
        }

        if (!inserted) {
            cout << "Hash table is full. Cannot insert " << name << " with key " << key << "." << endl;
        }
    }

    void search1(int key) {
        int loc = key % 10;
        Node* temp = hashtable1[loc];
        bool found = false;
        while (temp != NULL) {
            if (temp->data == key) {
                found = true;
                cout << "Key found with name: " << temp->name << endl;
                break;
            }
            temp = temp->next;
        }
        if (!found) {
            cout << "Key not found" << endl;
        }
    }

    void search2(int key) {
        int loc = key % 10;
        int orig = loc;
        bool found = false;

        while (occ[loc]) {
            if (hashtable2[loc] == key) {
                found = true;
                cout << "Key found at index " << loc << " with name: " << nametable[loc] << endl;
                break;
            }
            loc = (loc + 1) % 10;
            if (loc == orig) {     //to prevent infinite looping since the table wraps around itself
                break;
            }
        }

        if (!found) {
            cout << "Key not found" << endl;
        }
    }

    void display1() {
        for (int i = 0; i < 10; i++) {
            Node* temp = hashtable1[i];
            cout << "Bucket " << i << " : ";
            while (temp != NULL) {
                cout << temp->data << " (" << temp->name << ") ";
                temp = temp->next;
            }
            cout << endl;
        }
    }

    void display2() {
        for (int i = 0; i < 10; i++) {
            if (occ[i]) {
                cout << "Index " << i << " : " << hashtable2[i] << " (" << nametable[i] << ")" << endl;
            } else {
                cout << "Index " << i << " : -" << endl;
            }
        }
    }

    ~hashing() {
        for (int i = 0; i < 10; i++) {
            Node* temp = hashtable1[i];
            while (temp != NULL) {
                Node* del = temp;
                temp = temp->next;
                delete del;
            }
            hashtable1[i] = NULL;
        }
    }
};

int main() {
    hashing h1;
    int ch1, ch2;

    while (true) {
        cout << "Menu:\n 1. Separate Chaining\n 2. Linear Probing\n 3. Exit\n";
        cout << "Enter choice: ";
        cin >> ch1;

        if (ch1 == 1) {
            while (true) {
                cout << "1. Insert\n 2. Search\n 3. Display\n 4. Back\n";
                cout << "Enter choice: ";
                cin >> ch2;

                if (ch2 == 1) {
                    int key;
                    string name;
                    cout << "Enter key to insert: ";
                    cin >> key;
                    cout << "Enter name: ";
                    cin >> name;
                    h1.insert1(key, name);
                } else if (ch2 == 2) {
                    int key;
                    cout << "Enter key to search: ";
                    cin >> key;
                    h1.search1(key);
                } else if (ch2 == 3) {
                    h1.display1();
                } else if (ch2 == 4) {
                    break;
                } else {
                    cout << "Invalid choice. Try again." << endl;
                }
            }
        } else if (ch1 == 2) {
            while (true) {
                cout << "1. Insert\n 2. Search\n 3. Display\n 4. Back\n";
                cout << "Enter choice: ";
                cin >> ch2;

                if (ch2 == 1) {
                    int key;
                    string name;
                    cout << "Enter key to insert: ";
                    cin >> key;
                    cout << "Enter name: ";
                    cin >> name;
                    h1.insert2(key, name);
                } else if (ch2 == 2) {
                    int key;
                    cout << "Enter key to search: ";
                    cin >> key;
                    h1.search2(key);
                } else if (ch2 == 3) {
                    h1.display2();
                } else if (ch2 == 4) {
                    break;
                } else {
                    cout << "Invalid choice. Try again." << endl;
                }
            }
        } else if (ch1 == 3) {
            break;
        } else {
            cout << "Invalid choice. Try again." << endl;
        }
    }

    return 0;
}