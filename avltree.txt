#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string keyword;
    string meaning;
    Node* left;
    Node* right;
    int height;

    Node(string key, string mean) {
        keyword = key;
        meaning = mean;
        left = nullptr;
        right = nullptr;
        height = 0;  
    }
};

class AVLTree {
private:
    Node* root;

    int height(Node* n) {
        if (n == nullptr)
            return -1;  
        return n->height;
    }

    int balanceFactor(Node* n) {
        if (n == nullptr)
            return 0;
        return height(n->left) - height(n->right);
    }

    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    Node* rotateRight(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;
        x->right = y;
        y->left = T2;
        y->height = 1 + max(height(y->left), height(y->right));
        x->height = 1 + max(height(x->left), height(x->right));
        return x;
    }

    Node* rotateLeft(Node* x) {      
        Node* y = x->right;       
        Node* T2 = y->left;      
        y->left = x;     
        x->right = T2;      
        x->height = 1 + max(height(x->left), height(x->right));
        y->height = 1 + max(height(y->left), height(y->right));
        return y;
    }

    Node* insert(Node* node, string key, string meaning) {
        if (node == nullptr)
            return new Node(key, meaning);
        if (key < node->keyword)
            node->left = insert(node->left, key, meaning);
        else if (key > node->keyword)
            node->right = insert(node->right, key, meaning);
        node->height = 1 + max(height(node->left), height(node->right));

        int balance = balanceFactor(node);
        if (balance > 1 && key < node->left->keyword)
            return rotateRight(node);
        if (balance < -1 && key > node->right->keyword)
            return rotateLeft(node);
        if (balance > 1 && key > node->left->keyword) {
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }
        if (balance < -1 && key < node->right->keyword) {
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }
        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current->left != nullptr)
            current = current->left;
        return current;
    }

    Node* deleteNode(Node* root, string key) {
        if (!root)
            return root;
        if (key < root->keyword)
            root->left = deleteNode(root->left, key);
        else if (key > root->keyword)
            root->right = deleteNode(root->right, key);
        else {
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }
            Node* temp = minValueNode(root->right);
            root->keyword = temp->keyword;
            root->meaning = temp->meaning;
            root->right = deleteNode(root->right, temp->keyword);
        }
        root->height = 1 + max(height(root->left), height(root->right));
        int balance = balanceFactor(root);
        if (balance > 1 && balanceFactor(root->left) >= 0)
            return rotateRight(root);
        if (balance < -1 && balanceFactor(root->right) <= 0)
            return rotateLeft(root);
        if (balance > 1 && balanceFactor(root->left) < 0) {
            root->left = rotateLeft(root->left);
            return rotateRight(root);
        }
        if (balance < -1 && balanceFactor(root->right) > 0) {
            root->right = rotateRight(root->right);
            return rotateLeft(root);
        }
        return root;
    }

    void inOrder(Node* node) {
        if (node != nullptr) {
            inOrder(node->left);
            cout << node->keyword << " : " << node->meaning << endl;
            inOrder(node->right);
        }
    }

    void reverseInOrder(Node* node) {
        if (node != nullptr) {
            reverseInOrder(node->right);
            cout << node->keyword << " : " << node->meaning << endl;
            reverseInOrder(node->left);
        }
    }

    Node* search(Node* node, string key, int& comparisons) {
        if (node == nullptr)
            return nullptr;
        comparisons++;
        if (key == node->keyword)
            return node;
        if (key < node->keyword)
            return search(node->left, key, comparisons);
        else
            return search(node->right, key, comparisons);
    }
    
public:
    AVLTree() {
        root = nullptr;
    }

    void add(string key, string meaning) {
        root = insert(root, key, meaning);
    }

    void remove(string key) {
        root = deleteNode(root, key);
    }

    void updateMeaning(string key, string newMeaning) {
        int comparisons=0;
        Node* node = search(root, key, comparisons);
        if (node)
            node->meaning = newMeaning;
        else
            cout << "Keyword not found.\n";
    }

    void displayAscending() {
        cout << "Ascending Order: " << endl;
        inOrder(root);
    }

    void displayDescending() {
        cout << "Descending Order: " << endl;
        reverseInOrder(root);
    }

    void searchKeyword(string key) {
        int comparisons = 0;
        Node* result = search(root, key, comparisons);

        if (result) {
            cout << "Found: " << result->keyword << " = " << result->meaning << endl;
        } else {
            cout << "Keyword not found.\n";
        }

        cout << "Comparisons made: " << comparisons << endl;
    }

    void maxComparisons() {
        cout << "Maximum comparisons (Height of AVL Tree): " << height(root) << endl;
    }
};

int main() {
    AVLTree dict;
    int choice;
    string key, meaning;

    do {
        cout << "1. Add keyword" << endl;
        cout << "2. Delete keyword" << endl;
        cout << "3. Update meaning" << endl;
        cout << "4. Display Ascending" << endl;
        cout << "5. Display Descending" << endl;
        cout << "6. Search keyword" << endl;
        cout << "7. Max comparisons" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> key;
                cout << "Enter meaning: ";
                cin >> meaning;
                dict.add(key, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> key;
                dict.remove(key);
                break;
            case 3:
                cout << "Enter keyword to update: ";
                cin >> key;
                cout << "Enter new meaning: ";
                cin >> meaning;
                dict.updateMeaning(key, meaning);
                break;
            case 4:
                dict.displayAscending();
                break;
            case 5:
                dict.displayDescending();
                break;
            case 6:
                cout << "Enter keyword to search: ";
                cin >> key;
                dict.searchKeyword(key);
                break;
            case 7:
                dict.maxComparisons();
                break;
            case 0:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 0);
    return 0;
}